@model IEnumerable<Business.ViewModels.ProductViewModels.ProductViewModel>

<div class="row pb-3">
    <div class="col-12 pb-1">
        <partial name="_SortingOptions" />
    </div>
    
    @foreach (var product in Model)
    {
        <div class="col-lg-4 col-md-6 col-sm-6 pb-1">
            <div class="product-item bg-light mb-4">
                <div
                style="width: 100%; height: 250px;"
                 class="product-img position-relative overflow-hidden d-flex align-items-start">
                    <img 
                    src="@product.ImageUrl"
                    alt="@product.Name"
                    class="d-block w-100" style="height: auto; object-fit:contain; object-position:center;">
                    @if (product.Discount != null && product.Discount.Amount > 0)
                    {
                        <div class="position-absolute" style="top: 10px; right: 10px;">
                            <span class="badge badge-danger" style="font-size: 0.8rem; padding: 6px;">-@product.Discount.Amount%</span>
                        </div>
                    }
                    <div class="product-action">
                        <a class="btn btn-outline-dark btn-square" href="javascript:void(0);" 
                           onclick="addToCart('@product.Id')">
                            <i class="fa fa-shopping-cart"></i>
                        </a>
                        
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="fav btn" id="favControl-@product.Id" style="display:inline;">
                                @Html.AntiForgeryToken()
                                @if (ViewBag.UserFavorites != null && ViewBag.UserFavorites.Contains(product.Id))
                                {
                                    <button type="button" onclick="toggleFavoriteJS('@product.Id', true)" 
                                            class="btn btn-outline-dark btn-square favorite-btn">
                                        <i class="fas fa-heart text-danger"></i>
                                    </button>
                                }
                                else
                                {
                                    <button type="button" onclick="toggleFavoriteJS('@product.Id', false)" 
                                            class="btn btn-outline-dark btn-square favorite-btn">
                                        <i class="far fa-heart"></i>
                                    </button>
                                }
                            </div>
                        }
                        else
                        {
                            <a class="btn btn-outline-dark btn-square" href="/Account/Login?returnUrl=@Context.Request.Path">
                                <i class="far fa-heart"></i>
                            </a>
                        }
                        
                        <a class="btn btn-outline-dark btn-square" href="/Product/Detail/@product.Id"><i class="fa fa-search"></i></a>
                    </div>
                </div>
                <div class="text-center py-4">
                    <a class="h6 text-decoration-none text-truncate" href="/Product/Detail/@product.Id">@product.Name</a>
                    <div class="d-flex align-items-center justify-content-center mt-2">
                        @if (product.Discount != null && product.Discount.Amount > 0)
                        {
                            decimal discountedPrice = product.Price.GetValueOrDefault() * (1 - (decimal)product.Discount.Amount / 100);
                            <h5>$@discountedPrice.ToString("F2")</h5>
                            <h6 class="text-muted ml-2"><del>$@product.Price?.ToString("F2")</del></h6>
                        }
                        else
                        {
                            <h5>$@product.Price?.ToString("F2")</h5>
                        }
                    </div>
                    
                    @if (product.AverageReviewScore.HasValue)
                    {
                        <div class="d-flex align-items-center justify-content-center mb-1">
                            @for (int i = 1; i <= 5; i++)
                            {
                                @if (i <= Math.Floor(product.AverageReviewScore.Value))
                                {
                                    <small class="fa fa-star text-warning mr-1"></small>
                                }
                                else if (i <= Math.Ceiling(product.AverageReviewScore.Value))
                                {
                                    <small class="fa fa-star-half-alt text-warning mr-1"></small>
                                }
                                else
                                {
                                    <small class="far fa-star text-warning mr-1"></small>
                                }
                            }
                            <small>(@product.NoOfViews)</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    
    <!-- Pagination -->
    <div class="col-12">
        <nav>
            <ul class="pagination justify-content-center">
                @{
                    // Create a route value dictionary with all current query parameters
                    var routeValues = new Dictionary<string, object>(ViewContext.RouteData.Values.Where(r => r.Key != "page"));
                    
                    // Add all query string parameters
                    foreach (var query in Context.Request.Query)
                    {
                        if (query.Key != "pageNumber" && !routeValues.ContainsKey(query.Key))
                        {
                            routeValues.Add(query.Key, query.Value);
                        }
                    }
                }

                @if (ViewBag.CurrentPage > 1)
                {
                    <li class="page-item">
                        @{
                            routeValues["pageNumber"] = ViewBag.CurrentPage - 1;
                        }
                        <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), routeValues)">Previous</a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>
                }
                
                @{
                    // Calculate which page numbers to show
                    var currentPage = ViewBag.CurrentPage;
                    var totalPages = ViewBag.TotalPages;
                    int startPage = Math.Max(1, currentPage - 2);
                    int endPage = Math.Min(totalPages, startPage + 4);

                    // Adjust start page if we're near the end
                    if (endPage - startPage < 4 && startPage > 1)
                    {
                        startPage = Math.Max(1, endPage - 4);
                    }

                    // First page
                    if (startPage > 1)
                    {
                        routeValues["pageNumber"] = 1;
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), routeValues)">1</a>
                        </li>
                        
                        // Show ellipsis if there's a gap
                        if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <a class="page-link" href="#">...</a>
                            </li>
                        }
                    }

                    // Page numbers
                    for (int i = startPage; i <= endPage; i++)
                    {
                        routeValues["pageNumber"] = i;
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), routeValues)">@i</a>
                        </li>
                    }

                    // Last page
                    if (endPage < totalPages)
                    {
                        // Show ellipsis if there's a gap
                        if (endPage < totalPages - 1)
                        {
                            <li class="page-item disabled">
                                <a class="page-link" href="#">...</a>
                            </li>
                        }
                        
                        routeValues["pageNumber"] = totalPages;
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), routeValues)">@totalPages</a>
                        </li>
                    }
                }
                
                @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                {
                    routeValues["pageNumber"] = ViewBag.CurrentPage + 1;
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), routeValues)">Next</a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled"><a class="page-link" href="#">Next</a></li>
                }
            </ul>
        </nav>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Update cart count on page load
            updateCartCount();
        });
        
        // Function to toggle favorites using JavaScript/AJAX
        function toggleFavoriteJS(productId, isCurrentlyFavorite) {
            // Get the csrf token from any form on the page
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const url = isCurrentlyFavorite ? '/FavouriteList/RemoveFromFavorites' : '/FavouriteList/AddToFavorites';
            
            // Create form data with the necessary information
            const formData = new FormData();
            formData.append('productId', productId);
            formData.append('returnUrl', window.location.pathname + window.location.search);
            formData.append('__RequestVerificationToken', token);
            
            // Submit form using fetch API
            fetch(url, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the favorites count if function exists
                    if (typeof updateFavoritesCount === 'function') {
                        updateFavoritesCount();
                    }
                    
                    // Update UI for this specific button
                    const favControl = document.getElementById('favControl-' + productId);
                    const button = favControl.querySelector('button');
                    
                    if (button) {
                        if (isCurrentlyFavorite) {
                            // Change to non-favorite state
                            button.innerHTML = '<i class="far fa-heart"></i>';
                            button.onclick = function() { toggleFavoriteJS(productId, false); return false; };
                        } else {
                            // Change to favorite state
                            button.innerHTML = '<i class="fas fa-heart text-danger"></i>';
                            button.onclick = function() { toggleFavoriteJS(productId, true); return false; };
                        }
                    }
                }
            })
            .catch(error => console.error('Error toggling favorite:', error));
        }
    </script>
}
